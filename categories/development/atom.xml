<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Development | Aron Cedercrantz]]></title>
  <link href="http://aron.cedercrantz.com/categories/development/atom.xml" rel="self"/>
  <link href="http://aron.cedercrantz.com/"/>
  <updated>2012-08-13T15:52:12+02:00</updated>
  <id>http://aron.cedercrantz.com/</id>
  <author>
    <name><![CDATA[Aron Cedercrantz]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Convert between XPC objects and Objective-C objects]]></title>
    <link href="http://aron.cedercrantz.com/2011/12/17/convert-between-xpc-objects-and-objective-c/"/>
    <updated>2011-12-17T22:24:00+01:00</updated>
    <id>http://aron.cedercrantz.com/2011/12/17/convert-between-xpc-objects-and-objective-c</id>
    <content type="html"><![CDATA[<p><code>ObjectToXPC</code> is a small open source project I hacked together today. It simplifies the conversion between a few Objective-C classes and the "new” <em>XPC</em> objects. The library also comes with unit tests which covers quite a few scenarios, woop woop!</p>

<p>So that might be cool but what is <em>XPC</em>? XPC is new technology from Apple introduced in Mac OS X 10.7 (not publically available in iOS). It allows you to separate your application in different logical parts – services. These services all run as individual processes. Furthermore, each logical part can have a unique set of sandbox privileges. For example you can have one XPC service for network based communication and another for creating a ZIP-file of some downloaded data. Thus the technology can help yoy make your application more stable and secure.</p>

<h2>Supported Types</h2>

<p><code>ObjectToXPC</code>supports a few basic <em>Objective-C</em> classes and most <em>XPC Object</em> types.</p>

<h3>Objective-C</h3>

<p><code>ObjectToXPC</code>will allow you to convert instances of the following Objective-C classes to and from XPC Objects;</p>

<ul>
<li><code>NSArray</code> <span class="meta"><em>(where the elements are one of the supported)</em></span>,</li>
<li><code>NSData</code>,</li>
<li><code>NSDate</code>,</li>
<li><code>NSDictionary</code> <span class="meta"><em>(where the elements are one of the supported, keys must either be of the NSString class or define the <code>-description</code> method)</em></span>,</li>
<li><code>NSNull</code> <span class="meta"><em>(only in collections)</em></span>,</li>
<li><code>NSNumber</code>,</li>
<li><code>NSString</code>.</li>
</ul>


<p>If you try to convert an <code>NSArray</code> or a <code>NSDictionary</code> instance which contains an object which we can not convert (<em>i.e.</em> if the method <code>-XPCObject</code> is not implemented) the project will halt via an assertion. But only if the <code>DEBUG</code> macro has been set. Otherwise an error will only be logged to the console via <code>NSLog()</code> and program execution will continue with the object being skipped.</p>

<h3>XPC Objects</h3>

<p>The following types of XPC Objects can be converted to and from the previously mentioned Objective-C classes (via for example <code>-initWithXPCObject:</code>);</p>

<ul>
<li><code>XPC_TYPE_ARRAY</code>,</li>
<li><code>XPC_TYPE_BOOL</code>,</li>
<li><code>XPC_TYPE_DATA</code> <span class="meta"><em>(to and from <code>NSNumber</code>)</em></span>,</li>
<li><code>XPC_TYPE_DATE</code>,</li>
<li><code>XPC_TYPE_DICTIONARY</code>,</li>
<li><code>XPC_TYPE_DOUBLE</code> <span class="meta"><em>(to and from <code>NSNumber</code>)</em></span>,</li>
<li><code>XPC_TYPE_INT64</code> <span class="meta"><em>(to and from <code>NSNumber</code>)</em></span>,</li>
<li><code>XPC_TYPE_UINT64</code> <span class="meta"><em>(to and from <code>NSNumber</code>)</em></span>,</li>
<li><code>XPC_TYPE_NULL</code>,</li>
<li><code>XPC_TYPE_STRING</code>.</li>
</ul>


<h2>Get the Code</h2>

<p>You can find the project and the glorious source code on the <a href="https://github.com/rastersize/ObjectToXPC">GitHub project page</a>. Feel free to fork, add and fix stuff which I have missed or forgotten. Feel free to send me a pull request, I will happily intergrate it (if it looks OK)! The Xcode project file currently contains one dynamic library target and one unit test target.</p>

<p>To use it you can either link with the library or copy the source files manually into you project. You need all the <code>.h</code> and <code>.m</code> files found in the <code>Source</code> directory in case you opt for the latter case. As the XPC API was introduced in OS X 10.7 the project requires OS X 10.7 or newer, big suprise there. This is required both for building the project (with Xcode 4.2+ and ARC turned on) as well as running it. <code>ObjectToXPC</code> will not build for, or run on, the iOS platform as XPC Services does not exist (publically) on it.</p>

<h2>License</h2>

<p>The project is licensed under the "Simplified BSD license" (2-clause), for the exact terms please see the <a href="https://github.com/rastersize/ObjectToXPC/blob/master/LICENSE">LICENSE file</a> in the repository.</p>

<h2>Bugs and Other Reports</h2>

<p>Please file any bug reports in the <a href="https://github.com/rastersize/ObjectToXPC/issues">issue tracker for ObjectToXPC</a> on GitHub or even better fix it and then send me a pull request, also via <a href="https://github.com/">GitHub</a>.</p>

<p>Have you created an application which use any of my <a href="https://github.com/rastersize">open source projects</a> (including ObjectToXPC)? Please tell me about it. Not because you have to but because I would love to know! My <a href="/about">contact details</a> are available on <a href="/about">my about page</a>.</p>
]]></content>
  </entry>
  
</feed>
